/*
 * Phoenix-RTOS
 *
 * Operating system kernel
 *
 * STM32N6 basic peripherals control functions
 *
 * Copyright 2025 Phoenix Systems
 * Author: Jacek Maksymowicz
 *
 * This file is part of Phoenix-RTOS.
 *
 * %LICENSE%
 */

#ifndef _PHOENIX_ARCH_STM32N6_H_
#define _PHOENIX_ARCH_STM32N6_H_


#define PCTL_REBOOT_MAGIC 0xaa55aa55UL

/* STM32N6 device identifiers */
enum {
	pctl_aclkn = 0x0,
	pctl_aclknc,
	pctl_ahbm,
	pctl_ahb1,
	pctl_ahb2,
	pctl_ahb3,
	pctl_ahb4,
	pctl_ahb5,
	pctl_apb1,
	pctl_apb2,
	pctl_apb3,
	pctl_apb4,
	pctl_apb5,
	pctl_dbg = 0x20,
	pctl_mco1,
	pctl_mco2,
	pctl_xspiphycomp,
	pctl_per = 0x26,
	pctl_axisram3 = 0x40,
	pctl_axisram4,
	pctl_axisram5,
	pctl_axisram6,
	pctl_ahbsram1,
	pctl_ahbsram2,
	pctl_bkpsram,
	pctl_axisram1,
	pctl_axisram2,
	pctl_flexram,
	pctl_npucacheram,
	pctl_vencram,
	pctl_bootrom,
	pctl_gpdma1 = 0x64,
	pctl_adc12,
	pctl_ramcfg = 0x8c,
	pctl_mdf1 = 0x90,
	pctl_adf1,
	pctl_rng = 0xa0,
	pctl_hash,
	pctl_cryp,
	pctl_saes = 0xa4,
	pctl_pka = 0xa8,
	pctl_rifsc,
	pctl_iac,
	pctl_risaf = 0xae,
	pctl_gpioa = 0xc0,
	pctl_gpiob,
	pctl_gpioc,
	pctl_gpiod,
	pctl_gpioe,
	pctl_gpiof,
	pctl_gpiog,
	pctl_gpioh,
	pctl_gpion = 0xcd,
	pctl_gpioo,
	pctl_gpiop,
	pctl_gpioq,
	pctl_pwr = 0xd2,
	pctl_crc,
	pctl_hpdma1 = 0xe0,
	pctl_dma2d,
	pctl_jpeg = 0xe3,
	pctl_fmc,
	pctl_xspi1,
	pctl_pssi,
	pctl_sdmmc2,
	pctl_sdmmc1,
	pctl_xspi2 = 0xec,
	pctl_xspim,
	pctl_mce1,
	pctl_mce2,
	pctl_mce3,
	pctl_xspi3,
	pctl_mce4,
	pctl_gfxmmu,
	pctl_gpu,
	pctl_eth1mac = 0xf6,
	pctl_eth1tx,
	pctl_eth1rx,
	pctl_eth1,
	pctl_otg1,
	pctl_otgphy1,
	pctl_otgphy2,
	pctl_otg2,
	pctl_npucache,
	pctl_npu,
	pctl_tim2,
	pctl_tim3,
	pctl_tim4,
	pctl_tim5,
	pctl_tim6,
	pctl_tim7,
	pctl_tim12,
	pctl_tim13,
	pctl_tim14,
	pctl_lptim1,
	pctl_wwdg = 0x10b,
	pctl_tim10,
	pctl_tim11,
	pctl_spi2,
	pctl_spi3,
	pctl_spdifrx1,
	pctl_usart2,
	pctl_usart3,
	pctl_uart4,
	pctl_uart5,
	pctl_i2c1,
	pctl_i2c2,
	pctl_i2c3,
	pctl_i3c1,
	pctl_i3c2,
	pctl_uart7 = 0x11e,
	pctl_uart8,
	pctl_mdios = 0x125,
	pctl_fdcan = 0x128,
	pctl_ucpd1 = 0x132,
	pctl_tim1 = 0x140,
	pctl_tim8,
	pctl_usart1 = 0x144,
	pctl_usart6,
	pctl_uart9,
	pctl_usart10,
	pctl_spi1 = 0x14c,
	pctl_spi4,
	pctl_tim18 = 0x14f,
	pctl_tim15,
	pctl_tim16,
	pctl_tim17,
	pctl_tim9,
	pctl_spi5,
	pctl_sai1,
	pctl_sai2,
	pctl_dft = 0x162,
	pctl_hdp = 0x182,
	pctl_lpuart1,
	pctl_spi6 = 0x185,
	pctl_i2c4 = 0x187,
	pctl_lptim2 = 0x189,
	pctl_lptim3,
	pctl_lptim4,
	pctl_lptim5,
	pctl_vrefbuf = 0x18f,
	pctl_rtc,
	pctl_rtcapb,
	pctl_r2gret = 0x196,
	pctl_r2gnpu,
	pctl_serf = 0x19f,
	pctl_syscfg,
	pctl_bsec,
	pctl_dts,
	pctl_busperfm = 0x1a4,
	pctl_ltdc = 0x1c1,
	pctl_dcmipp,
	pctl_gfxtim = 0x1c4,
	pctl_venc,
	pctl_csi,
};


/* STM32N6 independent device clocks */
enum ipclks {
	pctl_ipclk_adf1sel = 0,
	pctl_ipclk_adc12sel,
	pctl_ipclk_adcpre,
	pctl_ipclk_dcmippsel,
	pctl_ipclk_eth1ptpsel,
	pctl_ipclk_eth1ptpdiv,
	pctl_ipclk_eth1pwrdownack,
	pctl_ipclk_eth1clksel,
	pctl_ipclk_eth1sel,
	pctl_ipclk_eth1refclksel,
	pctl_ipclk_eth1gtxclksel,
	pctl_ipclk_fdcansel,
	pctl_ipclk_fmcsel,
	pctl_ipclk_dftsel,
	pctl_ipclk_i2c1sel,
	pctl_ipclk_i2c2sel,
	pctl_ipclk_i2c3sel,
	pctl_ipclk_i2c4sel,
	pctl_ipclk_i3c1sel,
	pctl_ipclk_i3c2sel,
	pctl_ipclk_ltdcsel,
	pctl_ipclk_mco1sel,
	pctl_ipclk_mco1pre,
	pctl_ipclk_mco2sel,
	pctl_ipclk_mco2pre,
	pctl_ipclk_mdf1sel,
	pctl_ipclk_xspi1sel,
	pctl_ipclk_xspi2sel,
	pctl_ipclk_xspi3sel,
	pctl_ipclk_otgphy1sel,
	pctl_ipclk_otgphy1ckrefsel,
	pctl_ipclk_otgphy2sel,
	pctl_ipclk_otgphy2ckrefsel,
	pctl_ipclk_persel,
	pctl_ipclk_pssisel,
	pctl_ipclk_rtcsel,
	pctl_ipclk_rtcpre,
	pctl_ipclk_sai1sel,
	pctl_ipclk_sai2sel,
	pctl_ipclk_sdmmc1sel,
	pctl_ipclk_sdmmc2sel,
	pctl_ipclk_spdifrx1sel,
	pctl_ipclk_spi1sel,
	pctl_ipclk_spi2sel,
	pctl_ipclk_spi3sel,
	pctl_ipclk_spi4sel,
	pctl_ipclk_spi5sel,
	pctl_ipclk_spi6sel,
	pctl_ipclk_lptim1sel,
	pctl_ipclk_lptim2sel,
	pctl_ipclk_lptim3sel,
	pctl_ipclk_lptim4sel,
	pctl_ipclk_lptim5sel,
	pctl_ipclk_usart1sel,
	pctl_ipclk_usart2sel,
	pctl_ipclk_usart3sel,
	pctl_ipclk_uart4sel,
	pctl_ipclk_uart5sel,
	pctl_ipclk_usart6sel,
	pctl_ipclk_uart7sel,
	pctl_ipclk_uart8sel,
	pctl_ipclk_uart9sel,
	pctl_ipclk_usart10sel,
	pctl_ipclk_lpuart1sel,
	pctl_ipclks_count,
};


/* STM32N6 Interrupt numbers */
enum {
	pvd_pvm_irq = 16,
	dts_irq = 18,
	rcc_irq,
	lockup_irq,
	cache_ecc_irq,
	tcm_ecc_irq,
	bck_ecc_irq,
	fpu_irq,
	rtc_s_irq = 26,
	tamp_irq,
	rifsc_tamper_irq,
	iac_irq,
	rcc_s_irq,
	rtc_irq = 32,
	wdgls_early_irq = 34,
	wwdg_early_irq,
	exti0_irq,
	exti1_irq,
	exti2_irq,
	exti3_irq,
	exti4_irq,
	exti5_irq,
	exti6_irq,
	exti7_irq,
	exti8_irq,
	exti9_irq,
	exti10_irq,
	exti11_irq,
	exti12_irq,
	exti13_irq,
	exti14_irq,
	exti15_irq,
	hash_irq = 55,
	rng_irq,
	adc12_irq = 62,
	csi_dbg_irq,
	dcmipp_irq,
	pahb_err_irq = 68,
	npu_end_of_epoch_irq,
	npu1_irq,
	npu2_irq,
	npu3_irq,
	npucache_irq,
	ltdc_lo_irq,
	ltdc_lo_err_irq,
	dma2d_irq,
	jpeg_irq,
	venc_irq,
	gfxmmu_irq,
	gfxtim_irq,
	gpu2d_irq,
	gpu2d_error_irq,
	gpu_cache_irq,
	hpdma1_ch0_irq,
	hpdma1_ch1_irq,
	hpdma1_ch2_irq,
	hpdma1_ch3_irq,
	hpdma1_ch4_irq,
	hpdma1_ch5_irq,
	hpdma1_ch6_irq,
	hpdma1_ch7_irq,
	hpdma1_ch8_irq,
	hpdma1_ch9_irq,
	hpdma1_ch10_irq,
	hpdma1_ch11_irq,
	hpdma1_ch12_irq,
	hpdma1_ch13_irq,
	hpdma1_ch14_irq,
	hpdma1_ch15_irq,
	gpdma1_ch0_irq,
	gpdma1_ch1_irq,
	gpdma1_ch2_irq,
	gpdma1_ch3_irq,
	gpdma1_ch4_irq,
	gpdma1_ch5_irq,
	gpdma1_ch6_irq,
	gpdma1_ch7_irq,
	gpdma1_ch8_irq,
	gpdma1_ch9_irq,
	gpdma1_ch10_irq,
	gpdma1_ch11_irq,
	gpdma1_ch12_irq,
	gpdma1_ch13_irq,
	gpdma1_ch14_irq,
	gpdma1_ch15_irq,
	i2c1_ev_irq,
	i2c1_er_irq,
	i2c2_ev_irq,
	i2c2_er_irq,
	i2c3_ev_irq,
	i2c3_er_irq,
	i2c4_ev_irq,
	i2c4_er_irq,
	i3c1_ev_irq,
	i3c1_er_irq,
	i3c2_ev_irq,
	i3c2_er_irq,
	tim1_brk_irq,
	tim1_up_irq,
	tim1_trg_ccu_irq,
	tim1_cc_irq,
	tim2_irq,
	tim3_irq,
	tim4_irq,
	tim5_irq,
	tim6_irq,
	tim7_irq,
	tim8_brk_irq,
	tim8_up_irq,
	tim8_trg_ccu_irq,
	tim8_cc_irq,
	tim9_irq,
	tim10_irq,
	tim11_irq,
	tim12_irq,
	tim13_irq,
	tim14_irq,
	tim15_irq,
	tim16_irq,
	tim17_irq,
	tim18_irq,
	lptim1_irq,
	lptim2_irq,
	lptim3_irq,
	lptim4_irq,
	lptim5_irq,
	adf1_flt0_irq,
	mdf1_flt0_irq,
	mdf1_flt1_irq,
	mdf1_flt2_irq,
	mdf1_flt3_irq,
	mdf1_flt4_irq,
	mdf1_flt5_irq,
	sai1_a_irq,
	sai1_b_irq,
	sai2_a_irq,
	sai2_b_irq,
	spdifrx_irq,
	spi1_irq,
	spi2_irq,
	spi3_irq,
	spi4_irq,
	spi5_irq,
	spi6_irq,
	usart1_irq,
	usart2_irq,
	usart3_irq,
	uart4_irq,
	uart5_irq,
	usart6_irq,
	uart7_irq,
	uart8_irq,
	uart9_irq,
	usart10_irq,
	lpuart1_irq,
	xspi1_irq,
	xspi2_irq,
	xspi3_irq,
	fmc_irq,
	sdmmc1_irq,
	sdmmc2_irq,
	ucpd_irq,
	otg1_irq,
	otg2_irq,
	eth1_irq,
	fdcan1_it0_irq,
	fdcan1_it1_irq,
	fdcan2_it0_irq,
	fdcan2_it1_irq,
	fdcan3_it0_irq,
	fdcan3_it1_irq,
	fdcan_cu_irq,
	mdios_irq,
	dcmi_pssi_irq,
	wakeup_pin_irq,
	cti0_irq,
	cti1_irq,
	ltdc_up_irq = 209,
	ltdc_up_err_irq,
};


/* STM32N6 resource identifiers for non-RIF-aware slave peripherals */
enum pctl_risups {
	pctl_risup_spi1 = 0,
	pctl_risup_spi2,
	pctl_risup_spi3,
	pctl_risup_spi4,
	pctl_risup_spi5,
	pctl_risup_spi6,
	pctl_risup_sai1,
	pctl_risup_sai2 = 8,
	pctl_risup_i2c1,
	pctl_risup_i2c2,
	pctl_risup_i2c3,
	pctl_risup_i2c4,
	pctl_risup_i3c1,
	pctl_risup_i3c2,
	pctl_risup_usart1,
	pctl_risup_usart2,
	pctl_risup_usart3,
	pctl_risup_uart4,
	pctl_risup_uart5,
	pctl_risup_usart6,
	pctl_risup_uart7,
	pctl_risup_uart8,
	pctl_risup_uart9,
	pctl_risup_usart10,
	pctl_risup_lpuart1,
	pctl_risup_fdcan1,
	pctl_risup_tim1,
	pctl_risup_tim2,
	pctl_risup_tim3,
	pctl_risup_tim4,
	pctl_risup_tim5,
	pctl_risup_tim6,
	pctl_risup_tim7,
	pctl_risup_tim8,
	pctl_risup_tim9,
	pctl_risup_tim10,
	pctl_risup_tim11,
	pctl_risup_tim12,
	pctl_risup_tim13,
	pctl_risup_tim14,
	pctl_risup_tim15,
	pctl_risup_tim16,
	pctl_risup_tim17,
	pctl_risup_tim18,
	pctl_risup_gfxtim,
	pctl_risup_lptim1,
	pctl_risup_lptim2,
	pctl_risup_lptim3,
	pctl_risup_lptim4,
	pctl_risup_lptim5,
	pctl_risup_adf1,
	pctl_risup_mdf1,
	pctl_risup_sdmmc1,
	pctl_risup_sdmmc2,
	pctl_risup_mdios,
	pctl_risup_otg1_hs,
	pctl_risup_otg2_hs,
	pctl_risup_ucpd1,
	pctl_risup_eth1 = 60,
	pctl_risup_spdifrx,
	pctl_risup_syscfg,
	pctl_risup_adc12 = 64,
	pctl_risup_vrefbuf,
	pctl_risup_crc = 67,
	pctl_risup_iwdg,
	pctl_risup_wwdg,
	pctl_risup_rng = 76,
	pctl_risup_pka,
	pctl_risup_saes,
	pctl_risup_hash,
	pctl_risup_cryp1,
	pctl_risup_mce1,
	pctl_risup_mce2,
	pctl_risup_mce3,
	pctl_risup_mce4,
	pctl_risup_xspi1 = 86,
	pctl_risup_xspi2,
	pctl_risup_xspi3,
	pctl_risup_xspim,
	pctl_risup_fmc,
	pctl_risup_csi2host = 92,
	pctl_risup_dcmipp,
	pctl_risup_dcmi,
	pctl_risup_jpeg = 96,
	pctl_risup_venc,
	pctl_risup_icache,
	pctl_risup_gpu,
	pctl_risup_gfxmmu,
	pctl_risup_dma2d,
	pctl_risup_ltdc_cmn,
	pctl_risup_ltdc_l1,
	pctl_risup_ltdc_l2,
	pctl_risup_npu = 106,
	pctl_risups_count,
};


/* STM32N6 resource identifiers for bus mastering peripherals */
enum pctl_rimcs {
	pctl_rimc_trace = 0,
	pctl_rimc_npu,
	pctl_rimc_sdmmc1,
	pctl_rimc_sdmmc2,
	pctl_rimc_otg1,
	pctl_rimc_otg2,
	pctl_rimc_eth1,
	pctl_rimc_gpu,
	pctl_rimc_dma2d,
	pctl_rimc_dcmipp,
	pctl_rimc_ltdc_l1,
	pctl_rimc_ltdc_l2,
	pctl_rimc_venc,
	pctl_rimcs_count,
};


typedef struct {
	enum {
		pctl_set = 0,
		pctl_get,
	} action;

	enum {
		pctl_devclk = 0,
		pctl_cpuclk,
		pctl_gpioPrivilege,
		pctl_risup, /* Change allowed access for non-RIF-aware slave peripherals */
		pctl_rimc,  /* Change access rights for bus masters */
		pctl_ipclk, /* Independent peripheral clock settings (muxes and dividers) */
		pctl_otp,
		pctl_reboot,
		pctl_dmaPermissions,
	} type;

	union {
		struct {
			unsigned int dev;     /* one of pctl_* enum values */
			unsigned int state;   /* State in Run and Sleep modes: 1 - clock enabled, 0 - clock disabled */
			unsigned int lpState; /* State in Sleep mode: 1 - enabled, 0 - disabled */
		} devclk;
		struct {
			unsigned int hz;
		} cpuclk;
		struct {
			unsigned int port; /* one of pctl_gpio* enum values */
			/* Bitmask of pins
			 * 1 - Pin can be changed by only privileged code,
			 * 0 - Pin can be changed by userspace code or privileged code */
			unsigned int mask;
		} gpioPrivilege;
		struct {
			unsigned int index; /* one of pctl_risup_* enum values */
			int privileged;     /* 1 - set to privileged only, 0 - no change, -1 - set to unprivileged or privileged */
			int secure;         /* 1 - set to secure only, 0 - no change, -1 - set to non-secure or secure */
			int lock;           /* 1 - lock from changes until reset, 0 - no change */
		} risup;
		struct {
			unsigned int index; /* one of pctl_rimc_* enum values */
			int privileged;     /* 1 - set to privileged, 0 - no change, -1 - set to unprivileged */
			int secure;         /* 1 - set to secure 0 - no change, -1 - set to non-secure */
			int cid;            /* value of CID flag for this master on the interconnect. -1 for no change. */
		} rimc;
		struct {
			int dev; /* one of pctl_gpdma* or pctl_hpdma* enum values */
			unsigned int channel;
			int privileged; /* 1 - set to privileged, 0 - no change, -1 - set to unprivileged */
			int secure;     /* 1 - set to secure, 0 - no change, -1 - set to non-secure */
			int lock;       /* 1 - lock from changes until reset, 0 - no change */
		} dmaPermissions;
		struct {
			unsigned int ipclk;
			unsigned int setting;
		} ipclk;
		struct {
			unsigned int addr; /* OTP word */
			unsigned int val;  /* Value to be written / value returned */
		} otp;
		struct {
			unsigned int magic;
			unsigned int reason;
		} reboot;
	};
} __attribute__((packed)) platformctl_t;


#endif
